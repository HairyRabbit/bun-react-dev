// runtime/socket.ts
var socket = new WebSocket("ws://localhost:3000/hmr");
var msg_queue = [];
socket.addEventListener("open", () => {
  let data;
  while (data = msg_queue.shift())
    socket.send(data);
});
window.__DEV_SOCKET__ = socket;

// runtime/hmr/reload.ts
function reload() {
  window.location.reload();
}

// runtime/hmr/context.ts
var context = {
  module: new Map
};

// runtime/hmr/updater.ts
async function update(id) {
  const state = context.module.get(id);
  console.log(state);
  if (!state) {
    return false;
  }
  if (state.is_declined) {
    return false;
  }
  const accepts = state.accept_handlers;
  const disposes = state.dispose_handlers;
  state.dispose_handlers = [];
  state.data = {};
  disposes.map((callback) => callback());
  const timestamp = Date.now();
  for (const { deps, callback: accpet } of accepts) {
    const [module, ...dependencies] = await Promise.all([
      import(id + `?mtime=${timestamp}`),
      ...deps.map((d) => import(d + `?mtime=${timestamp}`))
    ]);
    accpet({ module, deps: dependencies });
  }
  return true;
}

// runtime/hmr/socket_handler.ts
var parse_message_data = function(data) {
  try {
    const json = JSON.parse(data);
    return json;
  } catch (error) {
    return null;
  }
};
var debug = console.log;
var Action;
(function(Action2) {
  Action2["Reload"] = "reload";
  Action2["Update"] = "update";
})(Action || (Action = {}));
socket.addEventListener("message", async (evt) => {
  const json = parse_message_data(evt.data.toString());
  debug("message", json);
  if (json === null)
    return;
  switch (json.type) {
    case Action.Reload: {
      reload();
      return;
    }
    case Action.Update: {
      try {
        const result = await update(json.payload.url);
        if (result === false)
          reload();
      } catch (error) {
        console.error(error);
        reload();
      }
      return;
    }
  }
});

// runtime/hmr/module.ts
class HotModule {
  id;
  data = {};
  is_lock = false;
  is_declined = false;
  is_accepted = false;
  accept_handlers = [];
  dispose_handlers = [];
  constructor(id) {
    this.id = id;
  }
  static create(id) {
    return new HotModule(id);
  }
  lock() {
    this.is_lock = true;
  }
  dispose(callback) {
    this.dispose_handlers.push(callback);
  }
  invalidate() {
    reload();
  }
  decline() {
    this.is_declined = true;
  }
  accept(_deps, callback = true) {
    if (this.is_lock)
      return;
    if (!this.is_accepted) {
      this.is_accepted = true;
    }
    if (!Array.isArray(_deps)) {
      callback = _deps || callback;
      _deps = [];
    }
    if (callback === true) {
      callback = () => {
      };
    }
    const deps = _deps.map((dep) => {
      return new URL(dep, `${window.location.origin}${this.id}`).pathname;
    });
    this.accept_handlers.push({
      deps,
      callback
    });
  }
}

// runtime/hmr/register.ts
function register(url) {
  const id = new URL(url).pathname;
  const module2 = context.module.get(id);
  if (module2) {
    module2.lock();
    module2.dispose_handlers.map((handler) => handler());
    return module2;
  }
  const created_module = HotModule.create(id);
  context.module.set(id, created_module);
  return created_module;
}
window.__DEV_HMR_REGISTER__ = register;

// runtime/react_refresh.ts
import {injectIntoGlobalHook} from "react-refresh/runtime";
injectIntoGlobalHook(window);
globalThis.$RefreshReg$ = () => {
};
globalThis.$RefreshSig$ = () => (type) => type;

//# debugId=949A99F1354181B764756e2164756e21
//# sourceMappingURL=data:application/json;base64,
